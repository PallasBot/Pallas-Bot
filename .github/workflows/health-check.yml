name: Health Check

on:
  schedule:
    # ÊØèÂë®‰∏Ä‰∏äÂçà 8:00 UTC Ê£ÄÊü•‰∏ÄÊ¨°
    - cron: '0 8 * * 1'
  workflow_dispatch:

jobs:
  docker-health-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and test Docker image
        run: |
          # ÊûÑÂª∫ÈïúÂÉè
          docker build -t pallas-bot-test .
          
          # ËøêË°åÂÆπÂô®ËøõË°åÂÅ•Â∫∑Ê£ÄÊü•
          docker run --name test-container -d pallas-bot-test
          
          # Á≠âÂæÖÂÆπÂô®ÂêØÂä®
          sleep 10
          
          # Ê£ÄÊü•ÂÆπÂô®Áä∂ÊÄÅ
          if docker ps | grep -q test-container; then
            echo "‚úÖ Container started successfully"
          else
            echo "‚ùå Container failed to start"
            docker logs test-container
            exit 1
          fi
          
          # Ê∏ÖÁêÜ
          docker stop test-container
          docker rm test-container

  dependency-vulnerability-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  performance-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync

      - name: Check import performance
        run: |
          uv run python -c "
          import time
          start = time.time()
          import sys
          sys.path.insert(0, 'src')
          
          # ÊµãËØï‰∏ªË¶ÅÊ®°ÂùóÁöÑÂØºÂÖ•Êó∂Èó¥
          try:
              import plugins
              print(f'‚úÖ Plugins import time: {time.time() - start:.2f}s')
          except ImportError as e:
              print(f'‚ö†Ô∏è  Plugin import issue: {e}')
          
          try:
              import common
              print(f'‚úÖ Common modules import time: {time.time() - start:.2f}s')
          except ImportError as e:
              print(f'‚ö†Ô∏è  Common import issue: {e}')
          "

      - name: Memory usage check
        run: |
          uv run python -c "
          import sys
          import os
          sys.path.insert(0, 'src')
          
          # Ê£ÄÊü•Âü∫Êú¨ÂÜÖÂ≠ò‰ΩøÁî®
          import psutil
          process = psutil.Process(os.getpid())
          memory_mb = process.memory_info().rss / 1024 / 1024
          print(f'üìä Base memory usage: {memory_mb:.1f} MB')
          
          if memory_mb > 100:
              print('‚ö†Ô∏è  High memory usage detected')
          else:
              print('‚úÖ Memory usage is acceptable')
          " || echo "psutil not available, skipping memory check"
